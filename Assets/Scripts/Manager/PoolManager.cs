//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from Assets/Scripts/Manager/PoolManagerSO
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if UNITY_EDITOR

using UnityEngine;
using UnityEngine.Pool;
using Cysharp.Threading.Tasks;

public class PoolManager : SingletonBehaviour<PoolManager>
{
    int craftButtonPoolCount = 64;
    int dropEquipmentItemPoolCount = 256;
    int dropGoldPoolCount = 256;
    int dropItemPoolCount = 256;
    int dropMiscItemPoolCount = 256;
    int dropUseableItemPoolCount = 256;
    int equipmentItemTrailPoolCount = 256;
    int goldTrailPoolCount = 256;
    int miscItemTrailPoolCount = 256;
    int shopSlotPoolCount = 32;
    int useableItemTrailPoolCount = 256;
    int buffIconPoolCount = 64;
    int monsterCriticalDamagePoolCount = 256;
    int monsterDamagePoolCount = 256;
    int monsterHUDPoolCount = 16;
    int playerDamagePoolCount = 64;
    int buffPoolCount = 64;

    [SerializeField] CraftSettingButton craftButtonPrefabs;
    [SerializeField] PoolObject dropEquipmentItemPrefabs;
    [SerializeField] PoolObject dropGoldPrefabs;
    [SerializeField] DropItem dropItemPrefabs;
    [SerializeField] PoolObject dropMiscItemPrefabs;
    [SerializeField] PoolObject dropUseableItemPrefabs;
    [SerializeField] ItemTrail equipmentItemTrailPrefabs;
    [SerializeField] ItemTrail goldTrailPrefabs;
    [SerializeField] ItemTrail miscItemTrailPrefabs;
    [SerializeField] ShopSlot shopSlotPrefabs;
    [SerializeField] ItemTrail useableItemTrailPrefabs;
    [SerializeField] BuffIcon buffIconPrefabs;
    [SerializeField] GameObject buffIconParent;
    [SerializeField] DamageText monsterCriticalDamagePrefabs;
    [SerializeField] DamageText monsterDamagePrefabs;
    [SerializeField] MonsterHUD monsterHUDPrefabs;
    [SerializeField] GameObject monsterHUDParent;
    [SerializeField] DamageText playerDamagePrefabs;

    public IObjectPool<CraftSettingButton> craftButtonPool { get; private set; }
    public IObjectPool<PoolObject> dropEquipmentItemPool { get; private set; }
    public IObjectPool<PoolObject> dropGoldPool { get; private set; }
    public IObjectPool<DropItem> dropItemPool { get; private set; }
    public IObjectPool<PoolObject> dropMiscItemPool { get; private set; }
    public IObjectPool<PoolObject> dropUseableItemPool { get; private set; }
    public IObjectPool<ItemTrail> equipmentItemTrailPool { get; private set; }
    public IObjectPool<ItemTrail> goldTrailPool { get; private set; }
    public IObjectPool<ItemTrail> miscItemTrailPool { get; private set; }
    public IObjectPool<ShopSlot> shopSlotPool { get; private set; }
    public IObjectPool<ItemTrail> useableItemTrailPool { get; private set; }
    public IObjectPool<BuffIcon> buffIconPool { get; private set; }
    public IObjectPool<DamageText> monsterCriticalDamagePool { get; private set; }
    public IObjectPool<DamageText> monsterDamagePool { get; private set; }
    public IObjectPool<MonsterHUD> monsterHUDPool { get; private set; }
    public IObjectPool<DamageText> playerDamagePool { get; private set; }
    public IObjectPool<Buff> buffPool { get; private set; }

    protected override void Awake()
    {
        base.Awake();
        AllPoolInit();
    }
    void AllPoolInit()
    {
        craftButtonPool = ObjectPoolInit(craftButtonPrefabs, craftButtonPoolCount);
        dropEquipmentItemPool = ObjectPoolInit(dropEquipmentItemPrefabs, dropEquipmentItemPoolCount);
        dropGoldPool = ObjectPoolInit(dropGoldPrefabs, dropGoldPoolCount);
        dropItemPool = ObjectPoolInit(dropItemPrefabs, dropItemPoolCount);
        dropMiscItemPool = ObjectPoolInit(dropMiscItemPrefabs, dropMiscItemPoolCount);
        dropUseableItemPool = ObjectPoolInit(dropUseableItemPrefabs, dropUseableItemPoolCount);
        equipmentItemTrailPool = ObjectPoolInit(equipmentItemTrailPrefabs, equipmentItemTrailPoolCount);
        goldTrailPool = ObjectPoolInit(goldTrailPrefabs, goldTrailPoolCount);
        miscItemTrailPool = ObjectPoolInit(miscItemTrailPrefabs, miscItemTrailPoolCount);
        shopSlotPool = ObjectPoolInit(shopSlotPrefabs, shopSlotPoolCount);
        useableItemTrailPool = ObjectPoolInit(useableItemTrailPrefabs, useableItemTrailPoolCount);
        buffIconPool = ObjectPoolInit(buffIconPrefabs, buffIconParent.transform, buffIconPoolCount);
        monsterCriticalDamagePool = ObjectPoolInit(monsterCriticalDamagePrefabs, transform, monsterCriticalDamagePoolCount);
        monsterDamagePool = ObjectPoolInit(monsterDamagePrefabs, transform, monsterDamagePoolCount);
        monsterHUDPool = ObjectPoolInit(monsterHUDPrefabs, monsterHUDParent.transform, monsterHUDPoolCount);
        playerDamagePool = ObjectPoolInit(playerDamagePrefabs, transform, playerDamagePoolCount);
        buffPool = ClassPoolInit<Buff>(buffPoolCount);
    }
    public async UniTask PreloadPool<T>(IObjectPool<T> _pool, int _count, int _batchSize = 0) where T : PoolBehaviour<T>
    {
        var tempArray = new T[_count];

        if(_batchSize <= 0)
        {
            for (int i = 0; i < _count; i++)
            {
                tempArray[i] = _pool.Get();
            }
            for (int i = 0; i < _count; i++)
            {
                _pool.Release(tempArray[i]);
            }
        }
        else
        {
            int index = 0;
            while (index < _count)
            {
                int limit = Mathf.Min(index + _batchSize, _count);

                for (int i = index; i < limit; i++)
                {
                    tempArray[i] = _pool.Get();
                }

                index = limit;

                await UniTask.Yield();
            }

            for (int i = 0; i < _count; i++)
            {
                _pool.Release(tempArray[i]);
            }
        }
    }
    public void PreloadClassPool<T>(IObjectPool<T> _pool, int _count) where T : ClassPool<T>, new()
    {
        var tempArray = new T[_count];

        for (int i = 0; i < _count; i++)
        {
            tempArray[i] = _pool.Get();
        }
        for (int i = 0; i < _count; i++)
        {
            _pool.Release(tempArray[i]);
        }
    }
    IObjectPool<T> ClassPoolInit<T>(int _count) where T : ClassPool<T>, new()
    {
        IObjectPool<T> temp = null;
        temp = new ObjectPool<T>(
           () => OnCreateClass(temp),
           OnGetClass,
           OnReleaseClass,
           OnDestroyClass,
           defaultCapacity: _count,
           maxSize: _count
        );
        return temp;
    }
    IObjectPool<T> ObjectPoolInit<T>(T _prefaps, int _count) where T : PoolBehaviour<T>
    {
        IObjectPool<T> temp = null;
        temp = new ObjectPool<T>(
            () => OnCreateObject(_prefaps, temp),
            OnGetObject,
            OnReleaseObject,
            OnDestroyObject,
            defaultCapacity: _count,
            maxSize: _count
        );
        return temp;
    }
    IObjectPool<T> ObjectPoolInit<T>(T _prefaps, Transform _parent, int _count) where T : PoolBehaviour<T>
    {
        IObjectPool<T> temp = null;
        temp = new ObjectPool<T>(
            () => OnCreateObject(_prefaps, temp, _parent),
            OnGetObject,
            OnReleaseObject,
            OnDestroyObject,
            defaultCapacity: _count,
            maxSize: _count
        );
        return temp;
    }
    private T OnCreateClass<T>(IObjectPool<T> _pool) where T : ClassPool<T>, new()
    {
        T temp = new T();
        temp.SetPool(_pool);
        return temp;
    }
    private T OnCreateObject<T>(T _prefaps, IObjectPool<T> _pool) where T : PoolBehaviour<T>
    {
        T temp = Instantiate(_prefaps);
        temp.SetPool(_pool);
        return temp;
    }
    private T OnCreateObject<T>(T _prefaps, IObjectPool<T> _pool, Transform _parent) where T : PoolBehaviour<T>
    {
        T temp = Instantiate(_prefaps, _parent);
        temp.SetPool(_pool);
        return temp;
    }
    private void OnGetObject<T>(T _temp) where T : MonoBehaviour
    {
        _temp.gameObject.SetActive(true);
    }
    private void OnGetClass<T>(T _temp) where T : ClassPool<T>, new()
    {
        _temp.Init();
    }
    private void OnReleaseObject<T>(T _temp) where T : MonoBehaviour
    {
        _temp.gameObject.SetActive(false);
    }
    private void OnReleaseClass<T>(T _temp) where T : ClassPool<T>, new()
    {
        _temp.Reset();
    }
    private void OnDestroyObject<T>(T _temp) where T : MonoBehaviour
    {
        Destroy(_temp.gameObject);
    }
    private void OnDestroyClass<T>(T _temp) where T : ClassPool<T>, new()
    {
        _temp.SetPool(null);
    }
}
#endif
