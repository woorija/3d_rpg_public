#if UNITY_EDITOR

using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditor.Compilation;
using UnityEditor.SceneManagement;
using UnityEngine;

public class PoolManagerAutoGenerator
{
    static string managerScenePath = "Assets/Scenes/OtherScenes/ManagerScene.unity";
    static string outputScriptPath = "Assets/Scripts/Manager/PoolManager.cs";
    static string poolConfigPath = "Assets/Scripts/Manager/PoolManagerSO";

    PoolConfigSO[] poolConfigs;
    public void GenerateClassCode()
    {
        string dir = Path.GetDirectoryName(outputScriptPath);

        if (!Directory.Exists(dir))
        {
            Directory.CreateDirectory(dir);
        }

        poolConfigs = LoadAllPoolConfigs(poolConfigPath);

        using (StreamWriter writer = new StreamWriter(outputScriptPath, false, Encoding.UTF8))
        {
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine("// <auto-generated>");
            writer.WriteLine("//     This code was auto-generated from Assets/Scripts/Manager/PoolManagerSO");
            writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            writer.WriteLine("//     the code is regenerated.");
            writer.WriteLine("// </auto-generated>");
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine();
            writer.WriteLine("#if UNITY_EDITOR");
            writer.WriteLine();
            writer.WriteLine("using UnityEngine;");
            writer.WriteLine("using UnityEngine.Pool;");
            writer.WriteLine("using Cysharp.Threading.Tasks;");
            writer.WriteLine();
            writer.WriteLine("public class PoolManager : SingletonBehaviour<PoolManager>");
            writer.WriteLine("{");

            foreach (var poolConfig in poolConfigs)
            {
                writer.WriteLine($"    int {poolConfig.poolName}PoolCount = {poolConfig.poolCapacity};");
            }

            writer.WriteLine();

            foreach (var poolConfig in poolConfigs)
            {
                if (poolConfig.isClassPool) continue;

                writer.WriteLine($"    [SerializeField] {poolConfig.poolDataType} {poolConfig.poolName}Prefabs;");

                if (poolConfig.hasParent && !string.IsNullOrEmpty(poolConfig.parentObjectName))
                {
                    writer.WriteLine($"    [SerializeField] GameObject {poolConfig.poolName}Parent;");
                }
            }

            writer.WriteLine();

            foreach (var poolConfig in poolConfigs)
            {
                writer.WriteLine($"    public IObjectPool<{poolConfig.poolDataType}> {poolConfig.poolName}Pool {{ get; private set; }}");
            }

            writer.WriteLine();
            writer.WriteLine("    protected override void Awake()");
            writer.WriteLine("    {");
            writer.WriteLine("        base.Awake();");
            writer.WriteLine("        AllPoolInit();");
            writer.WriteLine("    }");
            writer.WriteLine("    void AllPoolInit()");
            writer.WriteLine("    {");

            foreach (var poolConfig in poolConfigs)
            {
                if (poolConfig.isClassPool)
                {
                    writer.WriteLine($"        {poolConfig.poolName}Pool = ClassPoolInit<{poolConfig.poolDataType}>({poolConfig.poolName}PoolCount);");
                }
                else if (!poolConfig.hasParent)
                {
                    writer.WriteLine($"        {poolConfig.poolName}Pool = ObjectPoolInit({poolConfig.poolName}Prefabs, {poolConfig.poolName}PoolCount);");
                }
                else
                {
                    if (string.IsNullOrEmpty(poolConfig.parentObjectName))
                    {
                        writer.WriteLine($"        {poolConfig.poolName}Pool = ObjectPoolInit({poolConfig.poolName}Prefabs, transform, {poolConfig.poolName}PoolCount);");
                    }
                    else
                    {
                        writer.WriteLine($"        {poolConfig.poolName}Pool = ObjectPoolInit({poolConfig.poolName}Prefabs, {poolConfig.poolName}Parent.transform, {poolConfig.poolName}PoolCount);");
                    }
                }
            }

            writer.WriteLine("    }");
            writer.WriteLine("    public async UniTask PreloadPool<T>(IObjectPool<T> _pool, int _count, int _batchSize = 0) where T : PoolBehaviour<T>");
            writer.WriteLine("    {");
            writer.WriteLine("        var tempArray = new T[_count];");
            writer.WriteLine();
            writer.WriteLine("        if(_batchSize <= 0)");
            writer.WriteLine("        {");
            writer.WriteLine("            for (int i = 0; i < _count; i++)");
            writer.WriteLine("            {");
            writer.WriteLine("                tempArray[i] = _pool.Get();");
            writer.WriteLine("            }");
            writer.WriteLine("            for (int i = 0; i < _count; i++)");
            writer.WriteLine("            {");
            writer.WriteLine("                _pool.Release(tempArray[i]);");
            writer.WriteLine("            }");
            writer.WriteLine("        }");
            writer.WriteLine("        else");
            writer.WriteLine("        {");
            writer.WriteLine("            int index = 0;");
            writer.WriteLine("            while (index < _count)");
            writer.WriteLine("            {");
            writer.WriteLine("                int limit = Mathf.Min(index + _batchSize, _count);");
            writer.WriteLine();
            writer.WriteLine("                for (int i = index; i < limit; i++)");
            writer.WriteLine("                {");
            writer.WriteLine("                    tempArray[i] = _pool.Get();");
            writer.WriteLine("                }");
            writer.WriteLine();
            writer.WriteLine("                index = limit;");
            writer.WriteLine();
            writer.WriteLine("                await UniTask.Yield();");
            writer.WriteLine("            }");
            writer.WriteLine();
            writer.WriteLine("            for (int i = 0; i < _count; i++)");
            writer.WriteLine("            {");
            writer.WriteLine("                _pool.Release(tempArray[i]);");
            writer.WriteLine("            }");
            writer.WriteLine("        }");
            writer.WriteLine("    }");
            writer.WriteLine("    public void PreloadClassPool<T>(IObjectPool<T> _pool, int _count) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        var tempArray = new T[_count];");
            writer.WriteLine();
            writer.WriteLine("        for (int i = 0; i < _count; i++)");
            writer.WriteLine("        {");
            writer.WriteLine("            tempArray[i] = _pool.Get();");
            writer.WriteLine("        }");
            writer.WriteLine("        for (int i = 0; i < _count; i++)");
            writer.WriteLine("        {");
            writer.WriteLine("            _pool.Release(tempArray[i]);");
            writer.WriteLine("        }");
            writer.WriteLine("    }");
            writer.WriteLine("    IObjectPool<T> ClassPoolInit<T>(int _count) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        IObjectPool<T> temp = null;");
            writer.WriteLine("        temp = new ObjectPool<T>(");
            writer.WriteLine("           () => OnCreateClass(temp),");
            writer.WriteLine("           OnGetClass,");
            writer.WriteLine("           OnReleaseClass,");
            writer.WriteLine("           OnDestroyClass,");
            writer.WriteLine("           defaultCapacity: _count,");
            writer.WriteLine("           maxSize: _count");
            writer.WriteLine("        );");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    IObjectPool<T> ObjectPoolInit<T>(T _prefaps, int _count) where T : PoolBehaviour<T>");
            writer.WriteLine("    {");
            writer.WriteLine("        IObjectPool<T> temp = null;");
            writer.WriteLine("        temp = new ObjectPool<T>(");
            writer.WriteLine("            () => OnCreateObject(_prefaps, temp),");
            writer.WriteLine("            OnGetObject,");
            writer.WriteLine("            OnReleaseObject,");
            writer.WriteLine("            OnDestroyObject,");
            writer.WriteLine("            defaultCapacity: _count,");
            writer.WriteLine("            maxSize: _count");
            writer.WriteLine("        );");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    IObjectPool<T> ObjectPoolInit<T>(T _prefaps, Transform _parent, int _count) where T : PoolBehaviour<T>");
            writer.WriteLine("    {");
            writer.WriteLine("        IObjectPool<T> temp = null;");
            writer.WriteLine("        temp = new ObjectPool<T>(");
            writer.WriteLine("            () => OnCreateObject(_prefaps, temp, _parent),");
            writer.WriteLine("            OnGetObject,");
            writer.WriteLine("            OnReleaseObject,");
            writer.WriteLine("            OnDestroyObject,");
            writer.WriteLine("            defaultCapacity: _count,");
            writer.WriteLine("            maxSize: _count");
            writer.WriteLine("        );");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    private T OnCreateClass<T>(IObjectPool<T> _pool) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        T temp = new T();");
            writer.WriteLine("        temp.SetPool(_pool);");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    private T OnCreateObject<T>(T _prefaps, IObjectPool<T> _pool) where T : PoolBehaviour<T>");
            writer.WriteLine("    {");
            writer.WriteLine("        T temp = Instantiate(_prefaps);");
            writer.WriteLine("        temp.SetPool(_pool);");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    private T OnCreateObject<T>(T _prefaps, IObjectPool<T> _pool, Transform _parent) where T : PoolBehaviour<T>");
            writer.WriteLine("    {");
            writer.WriteLine("        T temp = Instantiate(_prefaps, _parent);");
            writer.WriteLine("        temp.SetPool(_pool);");
            writer.WriteLine("        return temp;");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnGetObject<T>(T _temp) where T : MonoBehaviour");
            writer.WriteLine("    {");
            writer.WriteLine("        _temp.gameObject.SetActive(true);");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnGetClass<T>(T _temp) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        _temp.Init();");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnReleaseObject<T>(T _temp) where T : MonoBehaviour");
            writer.WriteLine("    {");
            writer.WriteLine("        _temp.gameObject.SetActive(false);");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnReleaseClass<T>(T _temp) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        _temp.Reset();");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnDestroyObject<T>(T _temp) where T : MonoBehaviour");
            writer.WriteLine("    {");
            writer.WriteLine("        Destroy(_temp.gameObject);");
            writer.WriteLine("    }");
            writer.WriteLine("    private void OnDestroyClass<T>(T _temp) where T : ClassPool<T>, new()");
            writer.WriteLine("    {");
            writer.WriteLine("        _temp.SetPool(null);");
            writer.WriteLine("    }");
            writer.WriteLine("}");
            writer.WriteLine("#endif");
        }

        AssetDatabase.Refresh();
        CompilationPipeline.compilationFinished += OnCompilationFinished;
    }



    private PoolConfigSO[] LoadAllPoolConfigs(string _path)
    {
        string[] guids = AssetDatabase.FindAssets("t:PoolConfigSO", new[] { _path });

        return guids
            .Select(guid => AssetDatabase.LoadAssetAtPath<PoolConfigSO>(AssetDatabase.GUIDToAssetPath(guid)))
            .Where(asset => asset != null)
            .OrderBy(so => so.isClassPool ? 2 : (so.hasParent ? 1 : 0))
            .ToArray();
    }

    void OnCompilationFinished(object _)
    {
        CompilationPipeline.compilationFinished -= OnCompilationFinished;

        string originalScenePath = EditorSceneManager.GetActiveScene().path;
        var managerScene = EditorSceneManager.OpenScene(managerScenePath, OpenSceneMode.Single);

        PoolManager poolManager = Object.FindFirstObjectByType<PoolManager>();

        if (poolManager == null)
        {
            GameObject gameObject = new GameObject("PoolManager");
            poolManager = gameObject.AddComponent<PoolManager>();
        }

        SerializedObject poolManagerSO = new SerializedObject(poolManager);

        foreach (var poolConfig in poolConfigs)
        {
            string fieldName = poolConfig.poolName + "Prefabs";
            var property = poolManagerSO.FindProperty(fieldName);
            if (property != null)
            {
                property.objectReferenceValue = poolConfig.prefab;
            }
            if (poolConfig.hasParent && string.IsNullOrEmpty(poolConfig.parentObjectName))
            {
                GameObject parentObj = GameObject.Find(poolConfig.parentObjectName);
                var parentProperty = poolManagerSO.FindProperty(poolConfig.poolName + "Parent");
                if (parentProperty != null)
                {
                    property.objectReferenceValue = parentObj;
                }
            }
        }

        poolManagerSO.ApplyModifiedProperties();

        // 변경사항 저장 및 새로고침
        EditorSceneManager.SaveScene(managerScene);
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();

        // 원래 열려있던 씬 다시 로드
        EditorSceneManager.OpenScene(originalScenePath);
        Debug.Log("풀매니저세팅완료");
    }
}
#endif