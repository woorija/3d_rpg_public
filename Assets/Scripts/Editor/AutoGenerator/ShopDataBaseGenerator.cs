#if UNITY_EDITOR

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

public class ShopDataBaseGenerator : ICsvToCodeGenerator
{
    public string csvPath => "Assets/EditorData/CSV/ShopDB.csv";
    public string outputScriptPath => "Assets/EditorData/DB/ShopDataBase.cs";

    Dictionary<int, List<ShopItemData>> shopDB = new Dictionary<int, List<ShopItemData>>();
    public void GenerateClassCode()
    {
        string dir = Path.GetDirectoryName(outputScriptPath);

        if (!Directory.Exists(dir))
        {
            Directory.CreateDirectory(dir);
        }

        using (StreamWriter writer = new StreamWriter(outputScriptPath, false, Encoding.UTF8))
        {
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine("// <auto-generated>");
            writer.WriteLine("//     This code was auto-generated from Assets/EditorData/CSV/ShopDB.csv");
            writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            writer.WriteLine("//     the code is regenerated.");
            writer.WriteLine("// </auto-generated>");
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine();
            writer.WriteLine("#if UNITY_EDITOR");
            writer.WriteLine();
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine();
            writer.WriteLine("public static class ShopDataBase");
            writer.WriteLine("{");
            writer.WriteLine("    public static readonly Dictionary<int, List<ShopItemData>> ShopDB = new Dictionary<int, List<ShopItemData>>()");
            writer.WriteLine("    {");

            if (shopDB == null || shopDB.Count == 0)
            {
                writer.WriteLine("    };");
                writer.WriteLine("}");
                writer.WriteLine("#endif");
                return;
            }

            foreach (var kvp in shopDB)
            {
                writer.WriteLine("        {");
                writer.WriteLine($"            {kvp.Key}, new List<ShopItemData>()");
                writer.WriteLine("            {");

                foreach (var itemData in kvp.Value)
                {
                    writer.WriteLine($"                new ShopItemData({itemData.itemId}, {itemData.price}),");
                }

                writer.WriteLine("            }");
                writer.WriteLine("        },");
            }

            writer.WriteLine("    };");
            writer.WriteLine("}");
            writer.WriteLine("#endif");
        }
    }

    public void ReadCSV()
    {
        TextAsset csv = AssetDatabase.LoadAssetAtPath<TextAsset>(csvPath);

        if (csv == null)
        {
            DevelopUtility.Log("csv 파일을 찾을 수 없음");
            return;
        }

        var lines = csv.text.Split(new[] { "\r\n", "\n\r", "\n", "\r" }, StringSplitOptions.None);

        for (int i = 1; i < lines.Length; i++)
        {
            var values = lines[i].Split(',');

            if (values.Length == 0 || string.IsNullOrEmpty(values[0])) continue;

            int id = CSVReader.GetIntData(values[0]);

            List<ShopItemData> shopData = new List<ShopItemData>();

            for (int j = 1; j < values.Length - 1; j += 2)
            {
                if (string.IsNullOrEmpty(values[j])) break;
                shopData.Add(new ShopItemData(CSVReader.GetIntData(values[j]), CSVReader.GetIntData(values[j + 1])));
            }
            shopDB[id] = shopData;
        }

        GenerateClassCode();

        AssetDatabase.Refresh();
        EditorApplication.delayCall += () =>
        {
            DevelopUtility.Log("ShopDB.cs 생성 완료");
        };
    }
}

#endif