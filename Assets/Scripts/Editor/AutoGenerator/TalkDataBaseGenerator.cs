#if UNITY_EDITOR

using System.Collections.Generic;
using System;
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Text;

public class TalkDataBaseGenerator : ICsvToCodeGenerator
{
    public string csvPath => "Assets/EditorData/CSV/TalkDB.csv";

    public string outputScriptPath => "Assets/EditorData/DB/TalkDataBase.cs";

    Dictionary<int, List<TalkData>> talkDB = new Dictionary<int, List<TalkData>>();
    public void GenerateClassCode()
    {
        string dir = Path.GetDirectoryName(outputScriptPath);

        if (!Directory.Exists(dir))
        {
            Directory.CreateDirectory(dir);
        }

        using (StreamWriter writer = new StreamWriter(outputScriptPath, false, Encoding.UTF8))
        {
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine("// <auto-generated>");
            writer.WriteLine("//     This code was auto-generated from Assets/EditorData/CSV/TalkDB.csv");
            writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            writer.WriteLine("//     the code is regenerated.");
            writer.WriteLine("// </auto-generated>");
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine();
            writer.WriteLine("#if UNITY_EDITOR");
            writer.WriteLine();
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine();
            writer.WriteLine("public static class TalkDataBase");
            writer.WriteLine("{");
            writer.WriteLine("    public static readonly Dictionary<int, List<TalkData>> TalkDB = new Dictionary<int, List<TalkData>>()");
            writer.WriteLine("    {");

            if (talkDB == null || talkDB.Count == 0)
            {
                writer.WriteLine("    };");
                writer.WriteLine("}");
                writer.WriteLine("#endif");
                return;
            }

            foreach (var kvp in talkDB)
            {
                writer.WriteLine("        {");
                writer.WriteLine($"            {kvp.Key}, new List<TalkData>()");
                writer.WriteLine("            {");
                foreach (var talkData in kvp.Value)
                {
                    writer.WriteLine($"                new TalkData({talkData.questId}, {talkData.questProgress}, {talkData.talkIndex}, {talkData.talkNpcId}, \"{talkData.talk}\"),");
                }
                writer.WriteLine("            }");
                writer.WriteLine("        },");
            }
            writer.WriteLine("    };");
            writer.WriteLine("}");
            writer.WriteLine("#endif");
        }
    }

    public void ReadCSV()
    {
        TextAsset csv = AssetDatabase.LoadAssetAtPath<TextAsset>(csvPath);

        if (csv == null)
        {
            DevelopUtility.Log("csv 파일을 찾을 수 없음");
            return;
        }

        var lines = csv.text.Split(new[] { "\r\n", "\n\r", "\n", "\r" }, StringSplitOptions.None);

        for (int i = 1; i < lines.Length; i++)
        {
            var values = lines[i].Split(',');

            if (values.Length == 0 || string.IsNullOrEmpty(values[0])) continue;

            int id = CSVReader.GetIntData(values[0]);
            var talk = new TalkData(
                CSVReader.GetIntData(values[1]),
                CSVReader.GetIntData(values[2]),
                CSVReader.GetIntData(values[3]),
                CSVReader.GetIntData(values[4]),
                CSVReader.GetStringData(values[5])
            );

            if (!talkDB.ContainsKey(id))
            {
                talkDB[id] = new List<TalkData>();
            }
            talkDB[id].Add(talk);
        }

        GenerateClassCode();

        AssetDatabase.Refresh();
        EditorApplication.delayCall += () =>
        {
            DevelopUtility.Log("TalkDB.cs 생성 완료");
        };
    }
}

#endif